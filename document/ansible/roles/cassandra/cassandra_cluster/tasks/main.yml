- name: "check install"
  shell: source /etc/profile; ps -ef | grep  {{ cassandra_package_name }} |  grep -v grep  | awk '{print $2}'  |  uniq
  register: checkMsg
- name:
  block:
    - debug:
        msg: "已安装，自动跳过"
    - meta: end_play
  when: checkMsg.stdout != ""

- name: "关闭swap"
  command: sed -ri 's/.*swap.*/#&/' /etc/fstab

- name: "创建cassandra用户组"
  group:
    name: cassandra

- name: "创建cassandra用户"
  user:
    name: cassandra
    shell: /bin/bash
    group: cassandra
    password: "{{ 'cc@123' | password_hash('sha512') }}"
    create_home: True
    home: "{{cassandra_home_path}}"
    state: present

- name: "解压安装包"
  unarchive: src={{ playbook_dir }}/files/{{ cassandra_package_name }}-bin.tar.gz dest={{ cassandra_home_path }}

- name: "拷贝cassandra配置文件"
  template: src="templates/cassandra.yaml.j2" dest="{{ cassandra_home_path }}/{{ cassandra_package_name }}/conf/cassandra.yaml" owner=cassandra group=cassandra mode=0644

- name: "创建cassandra数据目录"
  file:
    path: "{{ cassandra_data_path }}"
    state: directory
    mode: '0777'
    owner: cassandra
    group: cassandra

- name: "创建cassandra日志目录"
  file:
    path: "{{ cassandra_log_path }}"
    state: directory
    mode: '0777'
    owner: cassandra
    group: cassandra

- name: "设置CASSANDRA_HOME环境变量"
  lineinfile:
    path: /etc/profile
    regexp: '^(.*)CASSANDRA_HOME=(.*)$'
    line: export CASSANDRA_HOME={{cassandra_home_path}}/{{ cassandra_package_name }}

- name: "设置PATH"
  lineinfile:
    path: /etc/profile
    line: export PATH=${CASSANDRA_HOME}/bin:$PATH

- name: "设置Cluster名称"
  lineinfile:
    path: "{{ cassandra_home_path }}/{{ cassandra_package_name }}/conf/cassandra.yaml"
    regexp: '^cluster_name:(.*)$'
    line: "cluster_name: '{{ cassandra_cluster_name }}'"

- name: "配置Cassandra seeds"
  lineinfile:
    path: "{{cassandra_home_path}}/{{cassandra_package_name}}/conf/cassandra.yaml"
    regexp: '^(.*)seeds: (.*)$'
    line: "          - seeds: {{ cassandra_seeds }}"

- name: "配置监听地址"
  lineinfile:
    path: "{{ cassandra_home_path }}/{{ cassandra_package_name }}/conf/cassandra.yaml"
    regexp: '^listen_address:(.*)$'
    line: "listen_address: {{ ansible_default_ipv4.address }}"

- name: "开启start_rpc"
  lineinfile:
    path: "{{ cassandra_home_path }}/{{ cassandra_package_name }}/conf/cassandra.yaml"
    regexp: '^start_rpc:(.*)$'
    line: "start_rpc: true"

- name: "设置rpc_address"
  lineinfile:
    path: "{{ cassandra_home_path }}/{{ cassandra_package_name }}/conf/cassandra.yaml"
    regexp: '^rpc_address:(.*)$'
    line: "rpc_address: {{ansible_default_ipv4.address}}"

- name: "修改目录属主"
  file:
    path: "{{ cassandra_home_path }}/{{ cassandra_package_name }}"
    owner: cassandra
    group: cassandra
    mode: '0777'
    recurse: yes

- name: "检查是否已经启动，如果启动先关闭已启动程序"
  shell: source /etc/profile; ps -ef | grep  {{ cassandra_package_name }} |  grep -v grep  | awk '{print $2}'  |  uniq | xargs -I {} kill -9 {}

- name: "启动cassandra"
  shell: source /etc/profile; su - cassandra -c "sh {{ cassandra_home_path }}/{{ cassandra_package_name }}/bin/cassandra"

- name: "延时60s等待Cassandra启动"
  shell: sleep 60s

- name: "复制数据库初始化脚本"
  template:
    src: "templates/data_init.sh.j2"
    dest: "{{ cassandra_home_path }}/{{ cassandra_package_name }}/data_init.sh"
    mode: 0777
  when: inventory_hostname == groups.cassandra_cluster[0]

- name: "cassandra 初始化数据"
  shell: source /etc/profile; su - cassandra -c "sh {{ cassandra_home_path }}/{{ cassandra_package_name }}/data_init.sh"
  when: inventory_hostname == groups.cassandra_cluster[0]


- name: "复制自动启动cassandra脚本"
  template:
    src: "templates/start_cassandra.sh.j2"
    dest: "{{ cassandra_home_path }}/{{ cassandra_package_name }}/start_cassandra.sh"
    mode: 0777
- name: "cassandra 设置开机启动"
  shell: source /etc/profile; cp {{ cassandra_home_path }}/{{ cassandra_package_name }}/start_cassandra.sh /etc/init.d/cassandra; chmod +x /etc/init.d/cassandra; chkconfig --add cassandra; chkconfig cassandra on;

